@using Microsoft.AspNetCore.Components.Web
@using System.IO;
@using Microsoft.AspNetCore.Components.Forms
@using DevExpress.ExpressApp
@using Microsoft.JSInterop;
@inject IJSRuntime JSRuntime

@if (!string.IsNullOrEmpty(content))
{
    if (!ComponentModel.ReadOnly)
    {
        <div>
            <button type="button" class="dxbs-toolbar-btn block-i btn btn-secondary my-2" @onclick="@ClearPdf">
                <div class="xaf-image image xaf-toolbar-image" style="background-color: currentColor; -webkit-mask: url('IImageService/Action_Delete?hash=b5fdf6b3ce9fd4b95fc02cf159ed07a9'); mask: url('IImageService/Action_Delete?hash=b5fdf6b3ce9fd4b95fc02cf159ed07a9'); -webkit-mask-position: center; mask-position: center; -webkit-mask-repeat: no-repeat; mask-repeat: no-repeat; height: 18px; width: 18px; mask-size: 18px; -webkit-mask-size: 18px; "></div>
                <span>Usuń</span>
            </button>
        </div>
    }
    <div>
        @if (fileExtension == "pdf")
        {
            <object data="@content" width="800" height="800"></object>
        }
        else if (!string.IsNullOrEmpty(fileExtension))
        {
            <img src="@content" width="800" height="800" class="img-fluid"/>
        }
    </div>
}
@if (ComponentModel.Value.Size <= 0)
{
    <InputFile OnChange="@SingleUpload" />
}

@code {
    [Parameter]
    public FileDataModel ComponentModel { get; set; }

    string content = "";
    string fileExtension = "";

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            base.OnInitialized();
            if (ComponentModel.Value == null || string.IsNullOrEmpty(ComponentModel.Value.FileName))
            {
                return;
            }
            var splitedFileName = ComponentModel.Value.FileName.Split(".");
            fileExtension = splitedFileName.LastOrDefault();
            Preview(ComponentModel.Value);
        }
    }

    private async Task SingleUpload(InputFileChangeEventArgs e)
    {
        var path = Path.GetFullPath(e.File.Name);
        fileExtension = Path.GetExtension(path).Replace(".", "");
        MemoryStream ms = new MemoryStream();

        try
        {
            await e.File.OpenReadStream(47483647).CopyToAsync(ms);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }

        var bytes = ms.ToArray();
        ComponentModel.Value.LoadFromStream(e.File.Name, ms);
        ((dynamic)ComponentModel.Value).Content = bytes;
        Preview(ComponentModel.Value);
        StateHasChanged();
    }

    private void Preview(dynamic fileData)
    {
        if (fileData == null || fileData.Size <= 0)
        {
            return;
        }
        if (fileExtension == "pdf")
        {
            content = $"data:application/pdf;base64,";
        }
        else
        {
            content = $"data:image/{fileExtension};base64,";
        }

        content += System.Convert.ToBase64String(fileData.Content);
        StateHasChanged();
    }

    private void ClearPdf()
    {
        ComponentModel.Value.Clear();
        content = "";
        StateHasChanged();
    }

    public static RenderFragment Create(FileDataModel componentModel) =>
    @<FileDataRenderer ComponentModel=@componentModel />;
}